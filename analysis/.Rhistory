View(new_dat)
Data<-read.csv("chicago-clinics3.csv")
New_Data <- Data[order(Data$Notes),]
View(New_Data)
Data<-read.csv("chicago-clinics3.csv")
New_Data <- Data[order(Data$Notes), c(Data$Name, Data$Address, Data$Notes, Data$lon, Data$lat)]
View(New_Data)
View(New_Data)
print(Data[1,3])
source('~/delete_duplicates_by_coord.R')
View(New_Data)
source('~/delete_duplicates_by_coord.R')
View(New_Data)
source('~/delete_duplicates_by_coord.R')
View(Data)
source('~/delete_duplicates_by_coord.R')
View(new_dat)
View(new_dat)
View(Data)
Data[90,]
Data[90,6]
Data[90,5]
Data[90,4]
Data<-read.csv("chicago-clinics3.csv")
Data<-arrange(Data, Notes)
Data <- Data[, 3:7]
same_lat=duplicated(paste(Data$lat, Data$lon))
print(same_lat)
print(sum(same_lat))
source('~/delete_duplicates_by_coord.R')
View(new_dat)
source('~/delete_duplicates_by_coord.R')
source('~/delete_duplicates_by_coord.R')
source('~/mergeforfullclinicdata.R')
View(FullClinicData)
print(FullClinicData[1:3,])
Data <- read_csv("chicago-clinics3.csv")
Data <- arrange(Data, Notes)
View(Data)
Data <- read_csv("chicago-clinics3.csv")
Data <- arrange(Data, Notes)
to_keep <- c("Name", "Address", "Notes", "lon", "lat")
Data <- Data[, to_keep]
same_coords <- duplicated(paste(Data$lat, Data$lon))
new_dat <- Data[which(!same_coords),]
View(new_dat)
source('~/delete_duplicates_by_coord.R')
source('C:/Users/Julia Smith/Box Sync/DiseasesW8HW.R')
source('C:/Users/Julia Smith/Box Sync/DiseasesW8HW.R')
source('C:/Users/Julia Smith/Box Sync/DiseasesW8HW.R')
source('C:/Users/Julia Smith/Box Sync/DiseasesW8HW.R')
source('C:/Users/Julia Smith/Box Sync/DiseasesW8HW.R')
source('C:/Users/Julia Smith/Box Sync/DiseasesW8HW.R')
source('C:/Users/Julia Smith/Box Sync/ParabolaSmithJulia.R')
Parabola <- function(beta, gamma, epsilon, i){
return((i-beta)*(i+gamma)-epsilon)
}
x = seq(from=-10,to=10,by=0.01);
m=3
b=2
ep=20
y = Parabola(beta=m,gamma=b,epsilon=ep,i=x);
plot(x,y,type="l");
z = uniroot(f=Parabola,interval=c(0,20),beta=m,gamma=b, epsilon=ep);
abline(h=0)
abline(v=z$root)
TrueRoot = -(b-m)/2 + 1/2*((b-m)^2-4*(-b*m-ep))^(1/2)
cat("The true root:",TrueRoot," Numeric root:",z$root," Difference:",TrueRoot-z$root,"\n");
source('C:/Users/Julia Smith/Box Sync/ParabolaSmithJulia.R')
Parabola <- function(beta, gamma, epsilon, i){
return((i-beta)*(i+gamma)-epsilon)
}
x = seq(from=-10,to=10,by=0.01);
m=3
b=2
ep= 0#20 #also tried 0
y = Parabola(beta=m,gamma=b,epsilon=ep,i=x);
plot(x,y,type="l");
z = uniroot(f=Parabola,interval=c(0,20),beta=m,gamma=b, epsilon=ep);
abline(h=0)
abline(v=z$root)
TrueRoot = -(b-m)/2 + 1/2*((b-m)^2-4*(-b*m-ep))^(1/2)
cat("The true root:",TrueRoot," Numeric root:",z$root," Difference:",TrueRoot-z$root,"\n");
Parabola <- function(beta, gamma, epsilon, i){
return((i-beta)*(i+gamma)-epsilon)
}
x = seq(from=-10,to=10,by=0.01);
m=3
b=2
ep= 20#0#20 #also tried 0
y = Parabola(beta=m,gamma=b,epsilon=ep,i=x);
plot(x,y,type="l");
z = uniroot(f=Parabola,interval=c(0,20),beta=m,gamma=b, epsilon=ep);
abline(h=0)
abline(v=z$root)
TrueRoot = -(b-m)/2 + 1/2*((b-m)^2-4*(-b*m-ep))^(1/2)
cat("The true root:",TrueRoot," Numeric root:",z$root," Difference:",TrueRoot-z$root,"\n");
rootStor = numeric();
j = 1;
epsRange = seq(from=0.1,to=40,by=0.1);
for(ep in epsRange){
z = uniroot(f=Parabola,interval=c(0,20),beta=m,gamma=b, epsilon=ep);
rootStor[j] = z$root;
j = j + 1;
}
plot(epsRange,rootStor,type="l",xlab="ep",ylab="root");
source('C:/Users/Julia Smith/Box Sync/SIR-BurnoutSmithJulia.R')
Burnout <- function(beta, gamma, S0, I0, i) {
return(1-i-exp(-beta/gamma*(S0*i+I0)))
}
rootStor = numeric();
j = 1;
m=2
b=.2
I0=.001
S0sRange = seq(from=0,to=1,by=0.01);
for(S0 in S0sRange){
z = uniroot(f=Burnout,interval=c(0,20),beta=m,gamma=b, S0=S0, I0=I0);
rootStor[j] = z$root;
j = j + 1;
}
plot(S0sRange, rootStor, t="l")
source('C:/Users/Julia Smith/Box Sync/SIR-BurnoutSmithJulia.R')
Parabola <- function(beta, gamma, epsilon, i){
return((i-beta)*(i+gamma)-epsilon)
}
x = seq(from=-10,to=10,by=0.01);
m=3
b=2
ep= 20 #also tried 0
y = Parabola(beta=m,gamma=b,epsilon=ep,i=x);
plot(x,y,type="l");
z = uniroot(f=Parabola,interval=c(0,20),beta=m,gamma=b, epsilon=ep);
abline(h=0)
abline(v=z$root)
TrueRoot = -(b-m)/2 + 1/2*((b-m)^2-4*(-b*m-ep))^(1/2)
cat("The true root:",TrueRoot," Numeric root:",z$root," Difference:",TrueRoot-z$root,"\n");
source('C:/Users/Julia Smith/Box Sync/RangeOfValuesSmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/RangeOfValuesSmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/RangeOfValuesSmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/RangeOfValuesSmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/SIR-BurnoutSmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/SIR-BurnoutSmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/SIR-BurnoutSmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/SIR-BurnoutSmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/DiseasesW8HW_SmithJulia.R')
library(deSolve)
NH <- 1000
NM <- 10000
muH <- 5.5e-5
nuH <- NH*muH #maybe don't need here
muM <- .143
nuM <- NM*muM #maybe don't need here
gammaH <- .033
THM <- .5
TMH <- .8
b=.5
XHinit <- 1e3
YHinit <- 10^(-.5)
XMinit <- 1e4
YMinit <- 1e1
states <- c(XH=XHinit, YH=YHinit, XM=XMinit, YM=YMinit)
params <- c(NH=NH, NM=NM, muH=muH, muM=muM, gammaH=gammaH, THM=THM, TMH=TMH, b=b)
func <- function(t, states, params) {
with(as.list(c(states, params)), {
nuH <- NH*muH
nuM <- NM*muM
r <- b/NH
dXH.dt <- nuH - r*THM*YM*XH - muH*XH
dYH.dt <- r*THM*YM*XH -muH*YH - gammaH*YH
dXM.dt <- nuM - r*TMH*YH*XM - muM*XM
dYM.dt <- r*TMH*YH*XM - muM*YM
return(list(c(dXH.dt,dYH.dt, dXM.dt, dYM.dt)))
})
}
t = seq(from=0,to=1000,by=0.01)
out = ode(y=states,times=t,func=func,parms=params)
plot(out[,1], log10(out[,2]), ylim=c(-2, 4), lwd=1, lty=1, t="l", xlab="Time (days)", ylab="log population size")
lines(out[,1], log10(out[,3]), lwd=1, lty=2)
lines(out[,1], log10(out[,4]), lwd=2, lty=1)
lines(out[,1], log10(out[,5]), lwd=2, lty=2)
LegendNames = c("Susc. Humans", "Inf. Humans", "Susc. Mosq.", "Inf. Mosq.")
LineWidths = c(1,1,2,2)
LineTypes = c(1,2,1,2)
legend(x=600, y=-1, legend=LegendNames, lty=LineTypes, lwd=LineWidths, bty="n")
print(out[length(out[,3]),3])
print(log(NM/NH))
source('C:/Users/Julia Smith/Box Sync/DiseasesW8HW_SmithJulia.R')
print(YH_vals[1])
print(YH_vals[2])
source('C:/Users/Julia Smith/Box Sync/DiseasesW8HW_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/DiseasesW8HW_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/DiseasesW8HW_SmithJulia.R')
print(10^NMSet)
log(84056/1000)
source('C:/Users/Julia Smith/Box Sync/DiseasesW8HW_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/DiseasesW8HW_SmithJulia.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/EEoID_HW4_SmithJulia.R')
source('C:/Users/Julia Smith/Box Sync/finch_MG_project.R')
conditions <- list.files(pattern = "\\.csv$")
all_results <- tibble()
library(tidyverse)
conditions <- list.files(pattern = "\\.csv$")
all_results <- tibble()
for (my_condition in conditions){
tmp <- read_csv(my_condition)
all_results <- rbind(all_results, tmp)
}
conditions = [s.replace(c("results", ".csv"), "") for s in conditions]
conditions = s.replace(c("results", ".csv"), "") for s in conditions
str_replace(conditions, c("results", ".csv"), "")
conditions <-str_replace(conditions, c("results", ".csv"), "")
library(tidyverse)
conditions <- list.files(pattern = "\\.csv$")
all_results <- tibble()
for (my_condition in conditions){
tmp <- read_csv(my_condition)
all_results <- rbind(all_results, tmp)
}
conditions <-str_replace(conditions, c("results", ".csv"), "")
strat=.054
for(my_condition in conditions[35]){ #conditions[1] is 1/12 in 100; also try 35 (1/4 in 100) and 50 (1/12 in 1000)
res <- filter(all_results,directory==my_condition)
dist_from_mar <- c()
success <- c()
repairing_hrs <- c()
for(rs in 0:999){
res_sim <- filter(res, rnd_seed==rs)
marauders <- filter(res_sim, probability_maraud == strat)
mar_xs <- marauders$x_pos
mar_ys <- marauders$y_pos
guarders <- filter(res_sim, probability_maraud == 0.0)
dist_sim <- rep(NA, nrow(guarders))
success_sim <- rep(NA, nrow(guarders))
repair_sim <- rep(NA, nrow(guarders))
for(i in 1:nrow(guarders)){
g_x <- guarders$x_pos[i]
g_y <- guarders$y_pos[i]
closest_yet <- Inf
for(j in 1:nrow(marauders)){
m_x <- mar_xs[j]
m_y <- mar_ys[j]
dist <- sqrt((m_x-g_x)^2 + (m_y-g_y)^2)
if(dist<closest_yet) {
closest_yet=dist
}
}
dist_sim[i] <- closest_yet
success_sim[i] <- guarders$successful_mating[i]
repair_sim[i] <- guarders$repairing_hrs[i]
}
dist_from_mar <- c(dist_from_mar, dist_sim)
success <- c(success, success_sim)
repairing_hrs <- c(repairing_hrs, repair_sim)
}
}
library(tidyverse)
conditions <- list.files(pattern = "\\.csv$")
all_results <- tibble()
for (my_condition in conditions){
tmp <- read_csv(my_condition)
all_results <- rbind(all_results, tmp)
}
conditions <-str_replace_all(conditions, c("results", ".csv"), "")
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, c("a", "e", "i"), "-")
str_replace_all(fruits, c("a", "e", "i"), "-")
library(tidyverse)
conditions <- list.files(pattern = "\\.csv$")
all_results <- tibble()
for (my_condition in conditions){
tmp <- read_csv(my_condition)
all_results <- rbind(all_results, tmp)
}
conditions <-str_replace(str_replace(conditions, "results", ""), ".csv", "")
strat=.054
for(my_condition in conditions[35]){ #conditions[1] is 1/12 in 100; also try 35 (1/4 in 100) and 50 (1/12 in 1000)
res <- filter(all_results,directory==my_condition)
dist_from_mar <- c()
success <- c()
repairing_hrs <- c()
for(rs in 0:999){
res_sim <- filter(res, rnd_seed==rs)
marauders <- filter(res_sim, probability_maraud == strat)
mar_xs <- marauders$x_pos
mar_ys <- marauders$y_pos
guarders <- filter(res_sim, probability_maraud == 0.0)
dist_sim <- rep(NA, nrow(guarders))
success_sim <- rep(NA, nrow(guarders))
repair_sim <- rep(NA, nrow(guarders))
for(i in 1:nrow(guarders)){
g_x <- guarders$x_pos[i]
g_y <- guarders$y_pos[i]
closest_yet <- Inf
for(j in 1:nrow(marauders)){
m_x <- mar_xs[j]
m_y <- mar_ys[j]
dist <- sqrt((m_x-g_x)^2 + (m_y-g_y)^2)
if(dist<closest_yet) {
closest_yet=dist
}
}
dist_sim[i] <- closest_yet
success_sim[i] <- guarders$successful_mating[i]
repair_sim[i] <- guarders$repairing_hrs[i]
}
dist_from_mar <- c(dist_from_mar, dist_sim)
success <- c(success, success_sim)
repairing_hrs <- c(repairing_hrs, repair_sim)
}
}
linearMod1 <- lm(success ~ dist_from_mar)
summary(linearMod1)
plot(dist_from_mar, success)
linearMod2 <- lm(repairing_hrs ~ dist_from_mar)
summary(linearMod2)
plot(dist_from_mar, repairing_hrs)
linearMod3 <- lm(success ~ repairing_hrs)
summary(linearMod3)
plot(repairing_hrs, success)
dists <- sort(unique(dist_from_mar))
for(d in dists){
print("distance from marauder")
print(d)
print("avg repair time")
print(mean(repairing_hrs[dist_from_mar==d]))
print("avg mating success")
print(mean(success[dist_from_mar==d]))
}
# hist(all_results$successful_mating,  main="Bowerbird Mating Distribution",
#      xlab="Sucessful Matings",
#      col="light blue")
num_males <- c(4,6,8,12,24)
# strats <- c(0.054)
# dists <- c(117.291)
# times <- c(6)
# slen<-length(strats)
# dlen<-length(dists)
# tlen<-length(times)
# twelvemat <- matrix(NA, nrow=slen, ncol=length(dists))
# sixmat <- matrix(NA, nrow=length(strats), ncol=length(dists))
# meansarr<-array(rep(NA, slen*tlen*dlen), dim=c(slen,tlen,dlen))
strat=.054
dims <- c(100, 1000) #missing dims in doc so we have to get it from directory... WILL DEAL LATER
for(i in 1:length(num_males)){
n_males<-num_males[i]
for(j in 1:(n_males-1)){
n_mar=j
res <- filter(all_results,num_males==n_males & num_mar==n_mar)
marauders <- filter(res, probability_maraud == strat)
guarders <- filter(res, probability_maraud == 0.0)
print(t.test(marauders$successful_mating, guarders$successful_mating))
print(n_males)
print(n_mar)
print(paste("variance of marauder matings", var(marauders$successful_mating)))
print(paste("variance of guarder matings", var(guarders$successful_mating)))
}
}
library(tidyverse)
conditions <- list.files("../to_store/")
lookup_table <- data.frame()
for (my_condition in conditions){
my_condition <- str_remove(my_condition, ".csv") #remove .csv from the file name in order to extract parameters without NA errors
my_condition <- str_remove(my_condition, "results")
# split the string
my_split <- strsplit(my_condition, "_|\\=")[[1]]
#print(my_split)
# extract parameters
num_males <- as.numeric(my_split[9])
num_mar <- as.numeric(my_split[11])
lookup_table <- rbind(lookup_table, data.frame(directory = my_condition,
num_males = num_males,
num_mar = num_mar))
}
#ESPECIALLY NOPE -- SOMETHING HERE DIDN'T WORK FOR ME
# conditions <- list.files("~/Desktop/results") #set to your working directory
# all_results <- tibble()
# for (my_condition in conditions[1]){
#   tmp <- read_csv(paste0("../to_store/", my_condition))
#   #tmp <- read_csv(paste0("results",my_condition,'.csv'))
#   tmp <- tmp %>% select(probability_maraud, successful_mating,
#                            foraging_hrs, staying_hrs, repairing_hrs,
#                         marauding_events, marauding_hrs, marauding_events,
#                         traveling_hrs, rnd_seed, directory)
#   all_results <- rbind(all_results, tmp)
# }
# all_results <- all_results %>% inner_join(lookup_table)
# all_results <- as.data.frame(all_results)
# head(all_results)
#THIS WORKED FOR ME BUT NOW ISN'T NECESSARY BC I DELETED THE STUFF IN to_store
all_results <- tibble()
for (my_condition in conditions){
# read and load each result
my_dir_results <- paste0("../to_store/", my_condition, "/results/")
my_results <- list.files(my_dir_results)
if (length(my_results) > 0){
# process a single file
for (my_file in my_results) {
# extract the random seed
my_rnd_seed <- strsplit(substr(my_file, 5, 1000), "D")[[1]][1]
my_rnd_seed <- as.numeric(my_rnd_seed)
tmp <- read_csv(paste0(my_dir_results, my_file)) %>% add_column(rnd_seed = my_rnd_seed, directory = my_condition)
tmp <- tmp %>% select(probability_maraud, successful_mating,
foraging_hrs, staying_hrs, repairing_hrs, marauding_events, marauding_hrs, traveling_hrs, rnd_seed, directory, mar_attempts, mate_attempts)
all_results <- rbind(all_results, tmp)
}
}
}
all_results <- all_results %>% inner_join(lookup_table)
View(all_results)
#saves a csv for each condition (for example, with 100 male and 1,000 simulations, this results in 100,000 rows) -- ALREADY USED
for (my_condition in conditions){
#name<-paste0("results_torus", my_condition)
#assign(name,filter(all_results, directory == my_condition))
write_csv(filter(all_results, directory == my_condition), path = paste0("results_aspatial",my_condition,'.csv'))
}
View(all_results)
print(my_conditions)
print(conditions)
for (my_condition in conditions[11:21]){
#name<-paste0("results_torus", my_condition)
#assign(name,filter(all_results, directory == my_condition))
write_csv(filter(all_results, directory == my_condition), path = paste0("results_aspatial",my_condition,'.csv'))
}
for (my_condition in conditions[11:21]){
#name<-paste0("results_torus", my_condition)
#assign(name,filter(all_results, directory == my_condition))
write_csv(filter(all_results, directory == my_condition), path = paste0("results_aspatial",my_condition,'.csv'))
}
for (my_condition in conditions[11:21]){
#name<-paste0("results_torus", my_condition)
#assign(name,filter(all_results, directory == my_condition))
write_csv(filter(all_results, directory == my_condition), path = paste0("results_aspatial",my_condition,'.csv'))
}
for (my_condition in conditions[11:21]){
#name<-paste0("results_torus", my_condition)
#assign(name,filter(all_results, directory == my_condition))
write_csv(filter(all_results, directory == my_condition), path = paste0("results_aspatial",my_condition,'.csv'))
}
for (my_condition in conditions[11:21]){
#name<-paste0("results_torus", my_condition)
#assign(name,filter(all_results, directory == my_condition))
write_csv(filter(all_results, directory == my_condition), path = paste0("results_aspatial",my_condition,'.csv'))
}
print("done")
setwd("~/BB_2_bird_null/analysis")
##saves a csv for each condition (for example, with 100 male and 1,000 simulations, this results in 100,000 rows)
# for (my_condition in conditions){
#   name<-paste0("results", my_condition)
#   assign(name,filter(all_results, directory == my_condition))
#   write_csv(filter(all_results, directory == my_condition), path = paste0("results",my_condition,'.csv'))
# }
#UNMOD FROM RACHEL
# conditions <- list.files("~/Desktop/results") #set to your working directory
# all_results <- tibble()
# for (my_condition in conditions){
#   tmp <- read_csv(paste0("~/Desktop/results/", my_condition))
#   #tmp <- read_csv(paste0("results",my_condition,'.csv'))
#   tmp <- tmp %>% select(probability_maraud, successful_mating,
#                            foraging_hrs, staying_hrs, repairing_hrs,
#                         marauding_events, marauding_hrs, marauding_events,
#                         traveling_hrs, rnd_seed, directory)
#   all_results <- rbind(all_results, tmp)
# }
# all_results <- all_results %>% inner_join(lookup_table)
# all_results <- as.data.frame(all_results)
# head(all_results)
library(tidyverse)
library(ggplot2)
library(ggrepel)
conditions <- list.files(pattern = "\\.csv$")
all_results <- tibble()
for (my_condition in conditions){
tmp <- read_csv(my_condition)
all_results <- rbind(all_results, tmp)
}
conditions <-str_replace(str_replace(conditions, "results", ""), ".csv", "")
#ME TRYING OUT A MULTIPLE REGRESSION -- IS THIS THE MOST EFFICIENT?  IS IT VALID... check assumptions?
library(car)
# Multiple Linear Regression Example
fit <- lm(successful_mating ~ repair + dimension + probability_maraud, data=filter(all_results, probability_maraud==.027 | probability_maraud==.054))
summary(fit) # show results
crPlots(fit)
#THIS SAYS EVEN DIM IS SIGNIFICANT
#R2 of .06 doesn't seem good tho
